steps:
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['app', 'deploy', '--quiet']

options:
  logging: CLOUD_LOGGING_ONLY


# cloudbuild.yaml (in your Flutter project root)
steps:
# Step 1: Build the Docker image using the Dockerfile in the current directory
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'build'
  - '-t'
  - 'gcr.io/$PROJECT_ID/flutter-web-app-appengine:$COMMIT_SHA' # Tag image with commit SHA
  - '.' # Build context is the current directory (Flutter project root)

# Step 2: Push the Docker image to Google Container Registry (GCR) or Artifact Registry
# GCR (gcr.io) is often used for App Engine Flexible images by default.
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'push'
  - 'gcr.io/$PROJECT_ID/flutter-web-app-appengine:$COMMIT_SHA'

# Step 3: Deploy to App Engine Flexible Environment
# This command uses the app.yaml and the built Docker image
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud app deploy app.yaml \
      --image-url=gcr.io/$PROJECT_ID/flutter-web-app-appengine:$COMMIT_SHA \
      --project=$PROJECT_ID \
      --version=v-$SHORT_SHA \
      --no-promote # Optional: deploy without promoting to serve all traffic immediately